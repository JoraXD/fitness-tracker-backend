// Package main boots the Fitness Tracker API server.
//
// @title           Fitness Tracker API
// @version         1.0
// @description     API documentation for the Fitness Tracker backend service.
//
// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @description  Provide your JWT with the "Bearer " prefix. Example: "Bearer {token}".
package main

import (
	"log"
	"os"
	"time"

	"github.com/gin-gonic/gin"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"

	"github.com/VibeTeam/fitness-tracker-backend/shared/middleware"
	"github.com/VibeTeam/fitness-tracker-backend/user/auth"
	userhandler "github.com/VibeTeam/fitness-tracker-backend/user/handler"
	"github.com/VibeTeam/fitness-tracker-backend/user/models"
	"github.com/VibeTeam/fitness-tracker-backend/user/repository/gormrepository"
	"github.com/VibeTeam/fitness-tracker-backend/user/use_case"

	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	_ "fitness-tracker-backend/docs"

	workouthandler "github.com/VibeTeam/fitness-tracker-backend/workout/handler"
	workoutmodels "github.com/VibeTeam/fitness-tracker-backend/workout/models"
	workoutrepo "github.com/VibeTeam/fitness-tracker-backend/workout/repository/gormrepository"
)

func main() {
	databaseURL := os.Getenv("DATABASE_URL")
	if databaseURL == "" {
		// local fallback
		databaseURL = "host=localhost port=5432 user=postgres password=postgres dbname=fitness_tracker sslmode=disable"
	}

	database, err := gorm.Open(postgres.Open(databaseURL), &gorm.Config{})
	if err != nil {
		log.Fatalf("failed to connect database: %v", err)
	}

	// Auto migrate user and workout models
	if err := database.AutoMigrate(&models.User{}, &workoutmodels.MuscleGroup{}, &workoutmodels.WorkoutType{}, &workoutmodels.WorkoutSession{}, &workoutmodels.WorkoutDetail{}); err != nil {
		log.Fatalf("migration failed: %v", err)
	}

	// build dependencies
	userRepository := gormrepository.NewUserRepository(database)

	// JWT setup
	accessSecret := os.Getenv("ACCESS_SECRET")
	if accessSecret == "" {
		accessSecret = "access-secret"
	}
	refreshSecret := os.Getenv("REFRESH_SECRET")
	if refreshSecret == "" {
		refreshSecret = "refresh-secret"
	}

	tokenManager := auth.NewManager(accessSecret, refreshSecret, 15*time.Minute, 7*24*time.Hour)
	authService := use_case.NewAuthService(userRepository, tokenManager)

	// repositories for workout domain
	muscleGroupRepo := workoutrepo.NewMuscleGroupRepository(database)
	workoutTypeRepo := workoutrepo.NewWorkoutTypeRepository(database)
	workoutSessionRepo := workoutrepo.NewWorkoutSessionRepository(database)
	workoutDetailRepo := workoutrepo.NewWorkoutDetailRepository(database)

	// handlers
	authMiddleware := middleware.Auth(tokenManager)

	userHandler := userhandler.New(userRepository)
	authHandler := userhandler.NewAuthHandler(authService)

	mgHandler := workouthandler.NewMuscleGroupHandler(muscleGroupRepo)
	wtHandler := workouthandler.NewWorkoutTypeHandler(workoutTypeRepo)
	wsHandler := workouthandler.NewWorkoutSessionHandler(workoutSessionRepo, workoutDetailRepo)

	router := gin.Default()
	// register routes
	userHandler.RegisterRoutes(router, authMiddleware)
	authHandler.RegisterRoutes(router, authMiddleware)

	mgHandler.RegisterRoutes(router, authMiddleware)
	wtHandler.RegisterRoutes(router, authMiddleware)
	wsHandler.RegisterRoutes(router, authMiddleware)
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler)) // Autogenerated swagger docs

	listenAddr := ":8080"
	if p := os.Getenv("PORT"); p != "" {
		listenAddr = ":" + p
	}

	log.Printf("Starting server at %s", listenAddr)
	log.Printf("Swagger is available at http://localhost%s/swagger/doc.json "+
		"or http://localhost%s/swagger/index.html", listenAddr, listenAddr)
	if err := router.Run(listenAddr); err != nil {
		log.Fatalf("server error: %v", err)
	}
}
