package main

import (
	"log"
	"os"

	"github.com/gin-gonic/gin"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"

	userhandler "github.com/VibeTeam/fitness-tracker-backend/user/handler"
	"github.com/VibeTeam/fitness-tracker-backend/user/models"
	"github.com/VibeTeam/fitness-tracker-backend/user/repository/gormrepository"

	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	_ "fitness-tracker-backend/docs"
)

func main() {
	dsn := os.Getenv("DATABASE_URL")
	if dsn == "" {
		// local fallback
		dsn = "host=localhost port=5432 user=postgres password=postgres dbname=fitness_tracker sslmode=disable"
	}

	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		log.Fatalf("failed to connect database: %v", err)
	}

	// Auto migrate user model
	if err := db.AutoMigrate(&models.User{}); err != nil {
		log.Fatalf("migration failed: %v", err)
	}

	// build dependencies
	userRepo := gormrepository.NewUserRepository(db)
	uh := userhandler.New(userRepo)

	r := gin.Default()
	uh.RegisterRoutes(r)
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler)) // Autogenerated swagger docs

	addr := ":8080"
	if p := os.Getenv("PORT"); p != "" {
		addr = ":" + p
	}

	log.Printf("Starting server at %s", addr)
	log.Printf("Swagger is available at http://localhost%s/swagger/doc.json "+
		"or http://localhost%s/swagger/index.html", addr, addr)
	if err := r.Run(addr); err != nil {
		log.Fatalf("server error: %v", err)
	}
}
