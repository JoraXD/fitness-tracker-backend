definitions:
  fitness-tracker-backend_user_handler.createUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
      - email
      - name
      - password
    type: object
  fitness-tracker-backend_user_handler.loginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
      - email
      - password
    type: object
  fitness-tracker-backend_user_handler.refreshRequest:
    properties:
      refresh_token:
        type: string
    required:
      - refresh_token
    type: object
  fitness-tracker-backend_user_handler.tokenResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  fitness-tracker-backend_user_handler.updateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  gin.H:
    additionalProperties: { }
    type: object
  github_com_VibeTeam_fitness-tracker-backend_user_models.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      passwordHash:
        type: string
    type: object
info:
  contact: { }
  description: API documentation for the Fitness Tracker backend service.
  title: Fitness Tracker API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
        - application/json
      description: Authenticates user credentials and returns JWT pair
      parameters:
        - description: Credentials
          in: body
          name: payload
          required: true
          schema:
            $ref: '#/definitions/fitness-tracker-backend_user_handler.loginRequest'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/fitness-tracker-backend_user_handler.tokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
      summary: User login
      tags:
        - auth
  /auth/logout:
    post:
      responses:
        "204":
          description: No Content
          schema:
            type: string
      security:
        - BearerAuth: [ ]
      summary: Logout (client-side token discard)
      tags:
        - auth
  /auth/refresh:
    post:
      consumes:
        - application/json
      description: Exchanges a refresh token for a new JWT pair
      parameters:
        - description: Refresh token
          in: body
          name: payload
          required: true
          schema:
            $ref: '#/definitions/fitness-tracker-backend_user_handler.refreshRequest'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/fitness-tracker-backend_user_handler.tokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
      summary: Refresh JWT tokens
      tags:
        - auth
  /users:
    get:
      parameters:
        - description: Limit
          in: query
          name: limit
          type: integer
        - description: Offset
          in: query
          name: offset
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github_com_VibeTeam_fitness-tracker-backend_user_models.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      security:
        - BearerAuth: [ ]
      summary: List users
      tags:
        - users
    post:
      consumes:
        - application/json
      description: Creates a user and returns the stored record
      parameters:
        - description: User info
          in: body
          name: payload
          required: true
          schema:
            $ref: '#/definitions/fitness-tracker-backend_user_handler.createUserRequest'
      produces:
        - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/github_com_VibeTeam_fitness-tracker-backend_user_models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Register new user
      tags:
        - users
  /users/{id}:
    delete:
      parameters:
        - description: User ID
          in: path
          name: id
          required: true
          type: integer
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      security:
        - BearerAuth: [ ]
      summary: Delete user
      tags:
        - users
    get:
      parameters:
        - description: User ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_VibeTeam_fitness-tracker-backend_user_models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
      security:
        - BearerAuth: [ ]
      summary: Get user by ID
      tags:
        - users
    put:
      consumes:
        - application/json
      parameters:
        - description: User ID
          in: path
          name: id
          required: true
          type: integer
        - description: Update information
          in: body
          name: payload
          required: true
          schema:
            $ref: '#/definitions/fitness-tracker-backend_user_handler.updateUserRequest'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_VibeTeam_fitness-tracker-backend_user_models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      security:
        - BearerAuth: [ ]
      summary: Update user
      tags:
        - users
securityDefinitions:
  BearerAuth:
    description: 'Provide your JWT with the "Bearer " prefix. Example: "Bearer {token}".'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
